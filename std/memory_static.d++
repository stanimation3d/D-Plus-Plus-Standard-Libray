// memory_static.d++ - D++ Standard Library: Static Memory Management with Ownership Semantics

namespace std::memory::static {

  // Trait to disable copying and enable move-only semantics
  @no_copy
  struct UniquePtr<T> {
    ptr: *T;

    // Constructor: takes ownership
    func new(ptr: *T) -> Self {
      return Self { ptr };
    }

    // Move constructor: transfers ownership
    func move(self: ref mut Self) -> Self {
      let new_owner = Self { ptr: self.ptr };
      self.ptr = null;
      return new_owner;
    }

    // Drop: automatically called to free memory
    func drop(self: ref mut Self) {
      if self.ptr != null {
        dealloc<T>(self.ptr);
        self.ptr = null;
      }
    }

    // Borrow immutable reference
    func borrow(self: ref Self) -> &T {
      return &*self.ptr;
    }

    // Borrow mutable reference
    func borrow_mut(self: ref mut Self) -> &mut T {
      return &mut *self.ptr;
    }
  }

  // Allocates memory for a single value of type T
  func alloc<T>() -> *T {
    return platform::alloc(sizeof(T)) as *T;
  }

  // Allocates and zero-initializes memory for a single value of type T
  func calloc<T>() -> *T {
    return platform::calloc(1, sizeof(T)) as *T;
  }

  // Frees memory for a single value
  func dealloc<T>(ptr: *T) {
    platform::free(ptr as *void);
  }

  // Copies memory from src to dest
  func copy<T>(dest: *T, src: *T, count: usize) {
    platform::mem_copy(dest as *void, src as *void, count * sizeof(T));
  }

  // Sets memory to a specific byte value
  func fill<T>(dest: *T, byte: u8, count: usize) {
    platform::mem_set(dest as *void, byte, count * sizeof(T));
  }

  // Compares memory regions
  func compare<T>(a: *T, b: *T, count: usize) -> int {
    return platform::mem_compare(a as *void, b as *void, count * sizeof(T));
  }

  // Platform-specific memory functions
  extern namespace platform {
    func alloc(size: usize) -> *void;
    func calloc(count: usize, size: usize) -> *void;
    func free(ptr: *void);
    func mem_copy(dest: *void, src: *void, size: usize);
    func mem_set(dest: *void, byte: u8, size: usize);
    func mem_compare(a: *void, b: *void, size: usize) -> int;
  }

} // namespace std::memory::static
